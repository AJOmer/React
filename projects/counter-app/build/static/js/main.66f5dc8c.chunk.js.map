{"version":3,"sources":["serviceWorker.js","components/counter.jsx","components/counters.jsx","index.js","logo.svg"],"names":["Boolean","window","location","hostname","match","Counter","state","count","props","value","tags","styles","fontSize","fontWeight","handleIncrement","setState","console","log","renderTags","length","map","tag","key","getBadgeClasses","classes","formatCount","this","Fragment","id","style","className","onClick","Component","Counters","counters","counter","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"uNAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,6CC6CSC,E,2MA5DbC,MAAQ,CACNC,MAAO,EAAKC,MAAMC,MAClBC,KAAM,CAAC,MAAO,MAAO,S,EAIvBC,OAAS,CACPC,SAAU,GACVC,WAAY,Q,EAuBdC,gBAAkB,WAChB,EAAKC,SAAS,CAAER,MAAO,EAAKD,MAAMC,MAAQ,IAC1CS,QAAQC,IAAI,0B,EAGdC,WAAa,WACX,OAA+B,IAA3B,EAAKZ,MAAMI,KAAKS,OAAqB,oDAGvC,4BACG,EAAKb,MAAMI,KAAKU,KAAI,SAAAC,GAAG,OACtB,wBAAIC,IAAKD,GAAMA,Q,EAMvBE,gBAAkB,WAChB,IAAIC,EAAU,mBAEd,OADAA,GAAgC,IAArB,EAAKlB,MAAMC,MAAc,UAAY,W,EAIlDkB,YAAc,WAAO,IACXlB,EAAU,EAAKD,MAAfC,MACR,OAAiB,IAAVA,EAAc,oCAAgBA,G,wEA7C7B,IAAD,OAEP,OADAS,QAAQC,IAAI,QAASS,KAAKlB,OAExB,kBAAC,IAAMmB,SAAP,KAEE,4BAAKD,KAAKlB,MAAMoB,IAChB,0BAAMC,MAAOH,KAAKf,OAAQmB,UAAWJ,KAAKH,mBACvCG,KAAKD,eAER,4BACEM,QAAS,kBAAM,EAAKjB,mBACpBgB,UAAU,4BAFZ,aAMCJ,KAAKR,kB,GA3BQc,aCqBPC,E,2MAnBb3B,MAAQ,CACN4B,SAAU,CACR,CAAEN,GAAI,EAAGnB,MAAO,GAChB,CAAEmB,GAAI,EAAGnB,MAAO,GAChB,CAAEmB,GAAI,EAAGnB,MAAO,GAChB,CAAEmB,GAAI,EAAGnB,MAAO,K,wEAIlB,OACE,6BACGiB,KAAKpB,MAAM4B,SAASd,KAAI,SAAAe,GAAO,OAC9B,kBAAC,EAAD,CAASb,IAAKa,EAAQP,GAAInB,MAAO0B,EAAQ1B,MAAOmB,GAAIO,EAAQP,a,GAb/CI,aCKvBI,IAASC,OAAQ,kBAAE,EAAF,MAAiBC,SAASC,eAAe,SH2HpD,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,a,kBIzI5BC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.66f5dc8c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from \"react\";\r\n\r\nclass Counter extends Component {\r\n  state = {\r\n    count: this.props.value,\r\n    tags: [\"Won\", \"Ton\", \"Soup\"]\r\n    // imageUrl: \"https://picsum.photos/200\"\r\n  };\r\n\r\n  styles = {\r\n    fontSize: 20,\r\n    fontWeight: \"bold\"\r\n  };\r\n\r\n  render() {\r\n    console.log(\"props\", this.props);\r\n    return (\r\n      <React.Fragment>\r\n        {/* <img src={this.state.imageUrl} alt=\"randpic\" /> */}\r\n        <h4>{this.props.id}</h4>\r\n        <span style={this.styles} className={this.getBadgeClasses()}>\r\n          {this.formatCount()}\r\n        </span>\r\n        <button\r\n          onClick={() => this.handleIncrement()}\r\n          className=\"btn btn-secondary btn-sm\"\r\n        >\r\n          Increment\r\n        </button>\r\n        {this.renderTags()}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n  handleIncrement = () => {\r\n    this.setState({ count: this.state.count + 1 });\r\n    console.log(\"BUTTON WAS CLICKED YO\");\r\n  };\r\n\r\n  renderTags = () => {\r\n    if (this.state.tags.length === 0) return <p>This is Empty my dawg</p>;\r\n\r\n    return (\r\n      <ul>\r\n        {this.state.tags.map(tag => (\r\n          <li key={tag}>{tag}</li>\r\n        ))}\r\n      </ul>\r\n    );\r\n  };\r\n\r\n  getBadgeClasses = () => {\r\n    let classes = \"badge m-2 badge-\";\r\n    classes += this.state.count === 0 ? \"warning\" : \"primary\";\r\n    return classes;\r\n  };\r\n\r\n  formatCount = () => {\r\n    const { count } = this.state;\r\n    return count === 0 ? <h1>Zero</h1> : count;\r\n  };\r\n}\r\n\r\nexport default Counter;\r\n","import React, { Component } from \"react\";\r\nimport Counter from \"./counter\";\r\n\r\nclass Counters extends Component {\r\n  state = {\r\n    counters: [\r\n      { id: 1, value: 7 },\r\n      { id: 2, value: 0 },\r\n      { id: 3, value: 0 },\r\n      { id: 4, value: 0 }\r\n    ]\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.state.counters.map(counter => (\r\n          <Counter key={counter.id} value={counter.value} id={counter.id} />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Counters;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport Counters from \"./components/counters\";\n\nReactDOM.render( < Counters / > , document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}